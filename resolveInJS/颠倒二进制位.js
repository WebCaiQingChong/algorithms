// 颠倒给定的 32 位无符号整数的二进制位。

//  

// 提示：

// 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
// 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
//  

// 进阶:
// 如果多次调用这个函数，你将如何优化你的算法？

//  

// 示例 1：

// 输入: 00000010100101000001111010011100
// 输出: 00111001011110000010100101000000
// 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
// 示例 2：

// 输入：11111111111111111111111111111101
// 输出：10111111111111111111111111111111
// 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//      因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
// 示例 1：

// 输入：n = 00000010100101000001111010011100
// 输出：964176192 (00111001011110000010100101000000)
// 解释：输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
// 示例 2：

// 输入：n = 11111111111111111111111111111101
// 输出：3221225471 (10111111111111111111111111111111)
// 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//      因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
//  

// 提示：

// 输入是一个长度为 32 的二进制字符串


/**
 * @param {number} n - a positive integer
 * @return {number} - a positive integer
 */

//  ### 解题思路
//  rev |= (n & 1) << (31 - i)
//  此处表示将n的最后一位提到最前面，然后与rev按位或，相当于复制给rev
//  即i = 1的时候，将n的最后一位放入rev中，
//  i= 2 的时候，将n的倒数第二位放入rev的第二位
//  n >>> 1,n 零填充右移，相当于去掉最后一位

 var reverseBits = function(n) {
    let rev = 0
    for (let i = 0; ++i; i < 32 && n > 0) {
        rev = rev | (n & 1) << (31 - i)
        n >>> 1
    }
    return rev >>>0

};
reverseBits(11)
